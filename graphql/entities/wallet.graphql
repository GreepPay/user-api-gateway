extend type Query {
    "Get many transactions - paginated list of transactions for the authenticated user"
    GetTransactions(
        orderBy: _ @orderBy(columns: ["created_at"])
        where: _
            @whereConditions(
                columns: [
                    "dr_or_cr"
                    "status"
                    "currency"
                    "amount"
                    "chargeable_type"
                    "reference"
                ]
            )
    ): [Transaction!]! @paginate @whereAuth(relation: "user")

    "Get many point transactions"
    GetPointTransactions(
        orderBy: _ @orderBy(columns: ["created_at"])
        where: _
            @whereConditions(
                columns: [
                    "dr_or_cr"
                    "status"
                    "currency"
                    "amount"
                    "chargeable_type"
                    "reference"
                ]
            )
    ): [PointTransaction!]! @paginate @whereAuth(relation: "user")

    "Get a single transaction by UUID"
    GetSingleTransaction(uuid: String! @eq): Transaction @first

    "Get a single point transaction by UUID"
    GetSinglePointTransaction(uuid: String! @eq): PointTransaction @first

    "Get a paginated list of beneficiaries for the authenticated user"
    GetBeneficiaries: [Beneficiary]! @paginate @whereAuth(relation: "user")

    "Get the currently supported on-ramp currencies"
    GetOnRampCurrencies: [SupportedCurrency!]!
        @field(resolver: "WalletQuery@getOnRampCurrencies")

    "Get the current exchange rate between two currencies"
    GetExchangeRate(
        from_currency: String!
        to_currency: String!
    ): ExchangeRate! @field(resolver: "WalletQuery@getExchangeRate")
}

extend type Mutation @guard {
    "Initiate a top-up transaction"
    InitiateTopup(
        method: String!
        amount: Float!
        currency: String!
        payment_metadata: String!
    ): Boolean! @field(resolver: "WalletMutator@initiateTopup")

    "Make a payment to another user"
    MakePayment(
        receiver_uuid: String!
        amount: Float!
        currency: String!
    ): Boolean! @field(resolver: "WalletMutator@makePayment")

    "Redeem GRP tokens"
    RedeemGRPToken(grp_amount: Float!): Boolean!
        @field(resolver: "WalletMutator@redeemGRPToken")

    "Add a user as a beneficiary"
    AddAsBeneficiary(user_uuid: String!, metadata: String!): Beneficiary!
        @field(resolver: "WalletMutator@addAsBeneficiary")

    "Remove a user as a beneficiary"
    RemoveAsBeneficiary(beneficiary_uuid: String!): Boolean!
        @field(resolver: "WalletMutator@removeAsBeneficiary")
}
